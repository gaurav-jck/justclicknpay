package com.justclick.clicknbook.Fragment.cashfreeQRimport android.app.AlertDialogimport android.content.Contextimport android.os.Bundleimport android.util.Logimport android.view.*import android.webkit.WebViewimport android.widget.Buttonimport android.widget.EditTextimport android.widget.LinearLayoutimport android.widget.Toast//import androidmads.library.qrgenearator.QRGContents//import androidmads.library.qrgenearator.QRGEncoderimport androidx.fragment.app.Fragmentimport com.google.gson.Gson//import com.google.zxing.WriterExceptionimport com.justclick.clicknbook.ApiConstantsimport com.justclick.clicknbook.Rimport com.justclick.clicknbook.databinding.FragmentQrCodeBindingimport com.justclick.clicknbook.model.LoginModelimport com.justclick.clicknbook.myinterface.ToolBarHideFromFragmentListenerimport com.justclick.clicknbook.network.NetworkCallimport com.justclick.clicknbook.utils.Commonimport com.justclick.clicknbook.utils.MyPreferencesimport okhttp3.ResponseBodyclass QRCodeFragment : Fragment() {    var toolBarHideFromFragmentListener: ToolBarHideFromFragmentListener?=null    var loginModel:LoginModel?=null    var mobileEdt:EditText?=null    var amountEdt:EditText?=null    var amountLin:LinearLayout?=null    var qrLin:LinearLayout?=null    var qrCodeIV: WebView?=null    var submitBtn: Button?=null    var userData:String?=null    var token:String?=null    var isCredential=false    override fun onAttach(context: Context) {        super.onAttach(context)        toolBarHideFromFragmentListener=context as ToolBarHideFromFragmentListener        loginModel= LoginModel()        loginModel=MyPreferences.getLoginData(loginModel,context)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        var view= inflater.inflate(R.layout.fragment_qr_code, container, false)        var binding=FragmentQrCodeBinding.bind(view)        toolBarHideFromFragmentListener!!.onToolBarHideFromFragment(true)        mobileEdt=view.findViewById(R.id.mobileEdt)        amountEdt=view.findViewById(R.id.amountEdt)        submitBtn=view.findViewById(R.id.submitBtn)        amountLin=view.findViewById(R.id.amountLin)        qrLin=view.findViewById(R.id.qrLin)        qrCodeIV=view.findViewById(R.id.idIVQrcode)        submitBtn=view.findViewById(R.id.submitBtn)        binding.backArrow.setOnClickListener{            parentFragmentManager.popBackStack()        }        submitBtn!!.setOnClickListener{            if(isCredential){                getCredentials()            }else{                payClicked()            }        }        getCredentials()        return view    }    private fun payClicked() {        var mobile=mobileEdt!!.text.toString().trim()        var amount=amountEdt!!.text.toString().trim()        if(!Common.isMobileValid(mobile)){            Toast.makeText(context, R.string.empty_and_invalid_mobile, Toast.LENGTH_SHORT).show()            return        }else if(!Common.isdecimalvalid(amount)){            Toast.makeText(context, R.string.empty_and_invalid_amount, Toast.LENGTH_SHORT).show()            return        }else if(amount.toInt()<100 || amount.toInt()>50000){            Toast.makeText(context, "Amount should be in between 100 to 50000", Toast.LENGTH_SHORT).show()            return        }//        Toast.makeText(context, "Submit clicked", Toast.LENGTH_SHORT).show()        vpaCheck(mobile, amount)    }    class CredentialRequest{        var MerchantId=ApiConstants.MerchantId        var AgentCode:String?=null        var Mode="App"    }    private fun getCredentials() {        var request= CredentialRequest()        request.AgentCode=loginModel!!.Data.DoneCardUser        NetworkCall().callService(NetworkCall.getCashFreeQRApiInterface().getQRAuth(ApiConstants.Authentication, request), requireContext(), true        ) { response: ResponseBody?, responseCode: Int ->            if (response != null) {                responseHandlerCredential(response, 1) //https://remittance.justclicknpay.com/api/payments/CheckCredential            } else {      //{"AgentCode":"JC0A13387","MerchantId":"JUSTCLICKTRAVELS","Mode":"App"}                Toast.makeText(requireContext(), R.string.response_failure_message, Toast.LENGTH_SHORT).show()            }        }    }    class CredentialResponse{        var statusCode:String?=null        var statusMessage:String?=null        var authvalidation:ArrayList<Authvalidation>?=null        class Authvalidation{            var token:String?=null            var userData:String?=null        }        /*"statusCode": "00",    "statusMessage": "Credential validated Successfully.",    "authvalidation"*/    }    private fun responseHandlerCredential(response: ResponseBody, i: Int) {        try {            val senderResponse = Gson().fromJson(response.string(), CredentialResponse::class.java)            if (senderResponse != null) {                if (senderResponse.statusCode == "00") {//                    Toast.makeText(context, senderResponse.statusMessage, Toast.LENGTH_LONG).show()//                    vpaCheck(senderResponse)                    userData=senderResponse.authvalidation!!.get(0).userData                    token=senderResponse.authvalidation!!.get(0).token                    if(isCredential){                        isCredential=false                        vpaCheck(mobileEdt!!.text.toString(), amountEdt!!.text.toString())                    }                } else {                    Toast.makeText(context, senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    isCredential=true//                    alertDialog(senderResponse.statusMessage)//                    hideCustomDialog()                }            } else {//                hideCustomDialog()//                Toast.makeText(context, "Validation failed", Toast.LENGTH_SHORT).show()                alertDialog("Validation failed")            }        } catch (e: Exception) {//            hideCustomDialog()            alertDialog("Validation failed with exception")        }    }    class QRCodeRequest{        var MerchantId=ApiConstants.MerchantId        var customer_phone:String?=null        var agentcode:String?=null        var Userdata:String?=null        var token:String?=null        var order_amount:Int?=null        var Mode="App"    }    private fun vpaCheck(mobile: String, amount: String) {        var request= QRCodeRequest()        request.agentcode=loginModel!!.Data.DoneCardUser        request.customer_phone=mobile        request.order_amount=Integer.parseInt(amount)        request.agentcode=loginModel!!.Data.DoneCardUser        request.Userdata=userData        request.token=token        val json = Gson().toJson(request)        NetworkCall().callService(NetworkCall.getCashFreeQRApiInterface().getQROTP(ApiConstants.cashfreedynamicQR,            request, userData, "Bearer "+token), context, true        ) { response: ResponseBody?, responseCode: Int ->            if (response != null) {                responseHandlerVpaCheck(response) //https://remittance.justclicknpay.com/api/payments/CheckCredential            } else {      //{"AgentCode":"JC0A13387","MerchantId":"JUSTCLICKTRAVELS","Mode":"App"}                Toast.makeText(requireContext(), R.string.response_failure_message, Toast.LENGTH_SHORT).show()            }        }    }    class VPACheckResponse{        var statusCode:String?=null        var statusMessage:String?=null        var qrData:String?=null        var orderid:String?=null        var vendororderid:String?=null    }    private fun responseHandlerVpaCheck(response: ResponseBody) {        try {            val senderResponse = Gson().fromJson(response.string(), VPACheckResponse::class.java)            if (senderResponse != null) {                if (senderResponse.statusCode == "00") {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    generateQr2(senderResponse.qrData)//                    activeQrConfirm(credentialRequest)                } else {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    alertDialog(senderResponse.statusMessage)//                    hideCustomDialog()                }            } else {//                hideCustomDialog()//                Toast.makeText(requireContext(), "Validation failed", Toast.LENGTH_SHORT).show()                alertDialog("Response error")            }        } catch (e: Exception) {//            hideCustomDialog()            alertDialog("Response error with exception")        }    }    private fun alertDialog(message: String?) {        val builder = AlertDialog.Builder(requireContext())        //set title for alert dialog        builder.setTitle("Alert")        //set message for alert dialog        builder.setMessage(message)//        builder.setIcon(android.R.drawable.ic_dialog_alert)        // Create the AlertDialog        var alertDialog: AlertDialog?=null        builder.setPositiveButton("OK"){dialogInterface, which ->            alertDialog!!.dismiss()//            parentFragmentManager.popBackStack()        }        alertDialog= builder.create()        // Set other dialog properties        alertDialog.setCancelable(false)        alertDialog.show()    }    private fun generateQr2(qrCode: String?) {        amountLin!!.visibility=View.GONE        qrLin!!.visibility=View.VISIBLE        qrCodeIV!!.loadUrl(qrCode!!);    }    private fun generateQr(qrCode: String?) {        /*val manager = getSystemService(requireContext()!!,) as WindowManager?        // initializing a variable for default display.        // initializing a variable for default display.        val display: Display = manager!!.defaultDisplay        // creating a variable for point which        // is to be displayed in QR Code.        // creating a variable for point which        // is to be displayed in QR Code.        val point = Point()        display.getSize(point)        // getting width and        // height of a point        // getting width and        // height of a point        val width: Int = point.x        val height: Int = point.y        // generating dimension from width and height.        // generating dimension from width and height.        var dimen = if (width < height) width else height        dimen = dimen * 3 / 4*/        // setting this dimensions inside our qr code        // encoder to generate our qr code.        // setting this dimensions inside our qr code        // encoder to generate our qr code.      /*  var qrgEncoder= QRGEncoder("Testing qr", null, QRGContents.Type.TEXT, 300*//*dimen*//*)        try {            // getting our qrcode in the form of bitmap.            var bitmap = qrgEncoder.encodeAsBitmap()            // the bitmap is set inside our image            // view using .setimagebitmap method.//            qrCodeIV!!.setImageBitmap(bitmap)        } catch (e: WriterException) {            // this method is called for            // exception handling.            Log.e("Tag", e.toString())        }*/    }    companion object {        @JvmStatic        fun newInstance(param1: String, param2: String) =            QRCodeFragment().apply {                arguments = Bundle().apply {                }            }    }}