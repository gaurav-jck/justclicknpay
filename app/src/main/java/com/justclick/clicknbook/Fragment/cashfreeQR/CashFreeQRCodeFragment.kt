package com.justclick.clicknbook.Fragment.cashfreeQRimport android.app.AlertDialogimport android.content.Contextimport android.os.Bundleimport androidx.fragment.app.Fragmentimport android.widget.Toastimport com.google.gson.Gsonimport com.justclick.clicknbook.ApiConstantsimport com.justclick.clicknbook.Rimport com.justclick.clicknbook.model.LoginModelimport com.justclick.clicknbook.myinterface.ToolBarHideFromFragmentListenerimport com.justclick.clicknbook.network.NetworkCallimport com.justclick.clicknbook.utils.MyPreferencesimport okhttp3.ResponseBodyimport android.R.attr.bitmap//import androidmads.library.qrgenearator.QRGContents////import androidmads.library.qrgenearator.QRGEncoderimport android.content.Context.WINDOW_SERVICEimport android.graphics.Pointimport android.util.Logimport android.view.*import android.webkit.WebViewimport android.widget.ImageViewimport androidx.core.content.ContextCompat.getSystemServiceimport androidx.core.content.ContextCompat//import com.google.zxing.WriterExceptionimport com.justclick.clicknbook.databinding.FragmentCashFreeQrCodeBindingclass CashFreeQRCodeFragment : Fragment() {    var toolBarHideFromFragmentListener: ToolBarHideFromFragmentListener?=null    var loginModel:LoginModel?=null    var qrCodeIV:WebView?=null    override fun onAttach(context: Context) {        super.onAttach(context)        toolBarHideFromFragmentListener=context as ToolBarHideFromFragmentListener        loginModel= LoginModel()        loginModel=MyPreferences.getLoginData(loginModel,context)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)    }    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {        // Inflate the layout for this fragment        var view= inflater.inflate(R.layout.fragment_cash_free_qr_code, container, false)        var binding=FragmentCashFreeQrCodeBinding.bind(view)        toolBarHideFromFragmentListener!!.onToolBarHideFromFragment(true)        qrCodeIV=view.findViewById(R.id.idIVQrcode)        binding.backArrow.setOnClickListener{            parentFragmentManager.popBackStack()        }        getCredentials()        return view    }    class CredentialRequest{        var MerchantId=ApiConstants.MerchantId        var AgentCode:String?=null        var Mode="App"    }    private fun getCredentials() {        var request= CredentialRequest()        request.AgentCode=loginModel!!.Data.DoneCardUser        NetworkCall().callService(NetworkCall.getCashFreeQRApiInterface().getQRAuth(ApiConstants.Authentication, request), requireContext(), true        ) { response: ResponseBody?, responseCode: Int ->            if (response != null) {                responseHandlerCredential(response, 1) //https://remittance.justclicknpay.com/api/payments/CheckCredential            } else {      //{"AgentCode":"JC0A13387","MerchantId":"JUSTCLICKTRAVELS","Mode":"App"}                Toast.makeText(requireContext(), R.string.response_failure_message, Toast.LENGTH_SHORT).show()            }        }    }    class CredentialResponse{        var statusCode:String?=null        var statusMessage:String?=null        var authvalidation:ArrayList<Authvalidation>?=null        class Authvalidation{            var token:String?=null            var userData:String?=null        }        /*"statusCode": "00",    "statusMessage": "Credential validated Successfully.",    "authvalidation"*/    }    private fun responseHandlerCredential(response: ResponseBody, i: Int) {        try {            val senderResponse = Gson().fromJson(response.string(), CredentialResponse::class.java)            if (senderResponse != null) {                if (senderResponse.statusCode == "00") {//                    Toast.makeText(context, senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    vpaCheck(senderResponse)//                    alertDialog(senderResponse.statusMessage)//                    if(MyCustomDialog.isDialogShowing()){//                    MyCustomDialog.setDialogMessage("Please wait transaction running...")}//                    openDialog(senderResponse.credentialData[0], senderResponse.credentialData[0].payoutlimit)//                    makeTransaction(senderResponse.credentialData[0].token, senderResponse.credentialData[0].userData)                } else {//                    Toast.makeText(context, senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    alertDialog(senderResponse.statusMessage)//                    hideCustomDialog()                }            } else {//                hideCustomDialog()//                Toast.makeText(context, "Validation failed", Toast.LENGTH_SHORT).show()                alertDialog("Validation failed")            }        } catch (e: Exception) {//            hideCustomDialog()            alertDialog("Validation failed with exception")        }    }    class VPACheckRequest{        var Merchant=ApiConstants.MerchantId        var LoggedInUserType:String?=null        var Identifier:String?=null        var Mode="App"    }    private fun vpaCheck(senderResponse: CredentialResponse) {        var request= VPACheckRequest()        request.Identifier=loginModel!!.Data.DoneCardUser        request.LoggedInUserType=loginModel!!.Data.UserType        NetworkCall().callService(NetworkCall.getCashFreeQRApiInterface().getVPACheck(ApiConstants.VPACheck,            senderResponse.authvalidation!!.get(0).userData, "Bearer "+senderResponse.authvalidation!!.get(0).token/*,        request.Identifier, request.LoggedInUserType, request.Merchant, request.Mode*/), context, true        ) { response: ResponseBody?, responseCode: Int ->            if (response != null) {                responseHandlerVpaCheck(response,senderResponse) //https://remittance.justclicknpay.com/api/payments/CheckCredential            } else {      //{"AgentCode":"JC0A13387","MerchantId":"JUSTCLICKTRAVELS","Mode":"App"}                Toast.makeText(requireContext(), R.string.response_failure_message, Toast.LENGTH_SHORT).show()            }        }    }    class VPACheckResponse{        var statusCode:String?=null        var statusMessage:String?=null        var vpaDetails:VpaDetails?=null        class VpaDetails{            var qrCode:String?=null            var vpaActive:String?=null        }    }    private fun responseHandlerVpaCheck(response: ResponseBody, credentialRequest: CredentialResponse) {        try {            val senderResponse = Gson().fromJson(response.string(), VPACheckResponse::class.java)            if (senderResponse != null) {                if (senderResponse.statusCode == "00") {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    generateQr2(senderResponse.vpaDetails!!.qrCode)//                    activeQrConfirm(credentialRequest)                } else if(senderResponse.statusCode.equals("01")) {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    activeQrConfirm(credentialRequest)//                    activeQr(credentialRequest)                }else {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    alertDialog(senderResponse.statusMessage)//                    hideCustomDialog()                }            } else {//                hideCustomDialog()//                Toast.makeText(requireContext(), "Validation failed", Toast.LENGTH_SHORT).show()                alertDialog("Response error")            }        } catch (e: Exception) {//            hideCustomDialog()            alertDialog("Response error with exception")        }    }    private fun activeQrConfirm(credentialRequest: CredentialResponse) {        val builder = AlertDialog.Builder(requireContext())        //set title for alert dialog        builder.setTitle("Please confirm")        //set message for alert dialog        builder.setMessage("You will be charged one time activation fee of Rs. 5 for QR Code Link Based Payment. Please confirm to proceed.")//        builder.setIcon(android.R.drawable.ic_dialog_alert)        // Create the AlertDialog        var alertDialog: AlertDialog?=null        //performing positive action        builder.setNegativeButton("Cancel"){dialogInterface, which ->            alertDialog!!.dismiss()            parentFragmentManager.popBackStack()        }        builder.setPositiveButton("Active now"){dialogInterface, which ->            alertDialog!!.dismiss()            activeQr(credentialRequest)        }        alertDialog= builder.create()        // Set other dialog properties        alertDialog.setCancelable(false)        alertDialog.show()    }    private fun generateQr2(qrCode: String?) {        qrCodeIV!!.loadUrl(qrCode!!);    }    private fun generateQr(qrCode: String?) {        /*val manager = getSystemService(requireContext()!!,) as WindowManager?        // initializing a variable for default display.        // initializing a variable for default display.        val display: Display = manager!!.defaultDisplay        // creating a variable for point which        // is to be displayed in QR Code.        // creating a variable for point which        // is to be displayed in QR Code.        val point = Point()        display.getSize(point)        // getting width and        // height of a point        // getting width and        // height of a point        val width: Int = point.x        val height: Int = point.y        // generating dimension from width and height.        // generating dimension from width and height.        var dimen = if (width < height) width else height        dimen = dimen * 3 / 4*/        // setting this dimensions inside our qr code        // encoder to generate our qr code.        // setting this dimensions inside our qr code        // encoder to generate our qr code.        /*var qrgEncoder= QRGEncoder("Testing qr", null, QRGContents.Type.TEXT, 300*//*dimen*//*)        try {            // getting our qrcode in the form of bitmap.            var bitmap = qrgEncoder.encodeAsBitmap()            // the bitmap is set inside our image            // view using .setimagebitmap method.//            qrCodeIV!!.setImageBitmap(bitmap)        } catch (e: WriterException) {            // this method is called for            // exception handling.            Log.e("Tag", e.toString())        }*/    }    private fun activeQr(credentialRequest: CredentialResponse) {        var request= VPACheckRequest()        request.Identifier=loginModel!!.Data.DoneCardUser        request.LoggedInUserType=loginModel!!.Data.UserType        NetworkCall().callService(NetworkCall.getCashFreeQRApiInterface().activeVPA(            credentialRequest.authvalidation!!.get(0).userData, "Bearer "+credentialRequest.authvalidation!!.get(0).token,            request.Identifier, request.LoggedInUserType, request.Merchant, request.Mode), requireContext(), true        ) { response: ResponseBody?, responseCode: Int ->            if (response != null) {                responseHandlerVpaActive(response,credentialRequest) //https://remittance.justclicknpay.com/api/payments/CheckCredential            } else {      //{"AgentCode":"JC0A13387","MerchantId":"JUSTCLICKTRAVELS","Mode":"App"}                Toast.makeText(requireContext(), R.string.response_failure_message, Toast.LENGTH_SHORT).show()            }        }    }    private fun responseHandlerVpaActive(response: ResponseBody, credentialRequest: CredentialResponse) {        try {            val senderResponse = Gson().fromJson(response.string(), VPACheckResponse::class.java)            if (senderResponse != null) {                if (senderResponse.statusCode == "00") {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    generateQr2(senderResponse.vpaDetails!!.qrCode)                } else if(senderResponse.statusCode.equals("01")) {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    alertDialog(senderResponse.statusMessage)                }else {//                    Toast.makeText(requireContext(), senderResponse.statusMessage, Toast.LENGTH_LONG).show()                    alertDialog(senderResponse.statusMessage)//                    hideCustomDialog()                }            } else {//                hideCustomDialog()//                Toast.makeText(requireContext(), "Validation failed", Toast.LENGTH_SHORT).show()                alertDialog("Activation failed")            }        } catch (e: Exception) {//            hideCustomDialog()            alertDialog("Activation failed with exception")        }    }    private fun alertDialog(message: String?) {        val builder = AlertDialog.Builder(requireContext())        //set title for alert dialog        builder.setTitle("Alert")        //set message for alert dialog        builder.setMessage(message)//        builder.setIcon(android.R.drawable.ic_dialog_alert)        // Create the AlertDialog        var alertDialog: AlertDialog?=null        //performing positive action        /*builder.setNegativeButton("Cancel"){dialogInterface, which ->            alertDialog!!.dismiss()        }*/        builder.setPositiveButton("OK"){dialogInterface, which ->            alertDialog!!.dismiss()            parentFragmentManager.popBackStack()        }        alertDialog= builder.create()        // Set other dialog properties        alertDialog.setCancelable(false)        alertDialog.show()    }    companion object {        @JvmStatic        fun newInstance(param1: String, param2: String) =            CashFreeQRCodeFragment().apply {                arguments = Bundle().apply {                }            }    }}